# Upstream to abstract backend connection(s) for PHP.
# upstream php {
    #this should match value of "listen" directive in php-fpm pool
    # server unix:/tmp/php-fpm.sock;
    # server 127.0.0.1:9000;
# }

map $host $service_api {
    hostnames;

    default          '';

    tp.*            service;
    tp5.*           service-5.1;
    laravel.*       laravel;
}

server {
    listen 80;
    server_name ~(?<app>.+)\.service\.gs$;

    # 设置应用根目录
    set $package_root_path D:/workspace/sirius-admin;

    # 默认为 API 请求
    set $package_root_alias $package_root_path/$service_api/public;

    # Client
    if ( $service_api = '' ) {
        set $package_root_alias $package_root_path/$app;
    }

    root $package_root_alias;
    index index.php index.html index.htm;

    # Global restrictions configuration file.
    # Designed to be included in any server {} block.
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    # robots.txt fallback to index.php
    location = /robots.txt {
        # Some WordPress plugin gererate robots.txt file
        allow all;
        try_files $uri $uri/ /index.php$is_args$args @robots;
        access_log off;
        log_not_found off;
    }
    # additional fallback if robots.txt doesn't exist
    location @robots {
        return 200 "User-agent: *\nDisallow: /index.php\nAllow: /public/index.php\n";
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac) excepted .well-known directory.
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\.(?!well-known\/) {
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:upload|file)s?/.*\.php$ {
        deny all;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\. {
        deny all;
    }

    location / {
        #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则
        if (!-e $request_filename) {
            #地址作为将参数rewrite到index.php上。
            rewrite ^/(.*)$ /index.php?s=/$1 last;
            #若是子目录则使用下面这句，将subdir改成目录名称即可。
            #rewrite ^/subdir/(.*)$ /subdir/index.php?s=/$1 last;
        }
    }
    
    location /api/ {
        #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则
        if (!-e $request_filename) {
            #若是子目录则使用下面这句，将subdir改成目录名称即可。
            rewrite ^/api/(.*)$ /api.php?s=/$1 last;
        }
    }
    
    location ~* ^\/upload\/.+\.(html|php)$ {
        return 404;
    }
    
    location ~* ^\/plugins\/.+\.(html|php)$ {
        return 404;
    }
    
    location ~* ^\/themes\/.+\.(html|php)$ {
        return 404;
    }

    #proxy the php scripts to php-fpm
    location ~ \.php {
        fastcgi_pass   127.0.0.1:9000; 
        # fastcgi_pass 如果是 sock形式，可能是下面的配置
        # fastcgi_pass unix:/tmp/php-cgi.sock

        include fastcgi.conf;
        include fastcgi_params;

        ##pathinfo支持start
        #定义变量 $path_info ，用于存放pathinfo信息
        set $path_info "";
        #定义变量 $real_script_name，用于存放真实地址
        set $real_script_name $fastcgi_script_name;
        #如果地址与引号内的正则表达式匹配
        if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") {
            #将文件地址赋值给变量 $real_script_name
            set $real_script_name $1;
            #将文件地址后的参数赋值给变量 $path_info
            set $path_info $2;
        }
        #配置fastcgi的一些参数
        fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;
        fastcgi_param SCRIPT_NAME $real_script_name;
        fastcgi_param PATH_INFO $path_info;
        ###pathinfo支持end

        fastcgi_intercept_errors on;
        
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        access_log off;
        log_not_found off;
    }

}
